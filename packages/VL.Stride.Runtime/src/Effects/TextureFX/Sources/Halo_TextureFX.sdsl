// source:
// https://github.com/mrvux/dx11-vvvv-girlpower/blob/master/nodes/texture11/Source/Halo.tfx

[TextureSource]
[Category("Source.Experimental")]
[Summary("Returns a halo texture")]
shader Halo_TextureFX : TextureFX
{
    matrix Transform;

    [EnumType("VL.Stride.Effects.TextureFX.HaloType")]
    int Type = 0;
    [Color]
    float4 BackgroundColor = float4(0.0f, 0.0f, 0.0f, 0.0f);
    [Color]
    float4 HaloColor = float4(1.0f, 1.0f, 1.0f, 1.0f);
    float Gamma = 0.5f;
    [Summary("Only relevant for 'Spike' type")]
    float MaxColor = 1.0f;

    float4 Linear(float f, float g)
    {
        f = saturate(1-2 * f);
        f = pow(f, g);
    
        return lerp(HaloColor, BackgroundColor, f);
    }

    float4 Smooth(float f, float g)
    {
        f = saturate(1-2 * f);
        f = smoothstep(0,1,f);
        f = pow(f, g);
    
        return lerp(HaloColor, BackgroundColor, f);
    }
    
    float4 Spike(float d, float f, float g)
    {
        f = saturate(1-2 * f);
        f = 2*pow(.5*f/(pow(d, .5) + .5), g);

        float4 c = lerp(HaloColor, BackgroundColor, f);

        return min(MaxColor, c);
    }

    stage override float4 Shading()
    {
        float2 uv = streams.TexCoord;

        float4 col = 0;

        float2 x0 = mul(float4((uv * 2-1)*float2(1, -1), 0, 1),Transform).xy*0.5*float2(1, -1) + 0.5;
        float d = length(x0-.5);
        float f = length(x0-.5);
     
        float g = Gamma/(1.00001-Gamma);
        f = saturate(1 - 2*f);

        switch(Type)
        {
            case 0 : col = Linear(f, g); break;
            case 1 : col = Smooth(f, g); break;
            case 2 : col = Spike(d, f, g); break;
        }

        return col;
    }
};