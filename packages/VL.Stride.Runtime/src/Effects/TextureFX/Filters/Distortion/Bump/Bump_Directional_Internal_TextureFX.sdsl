// source:
// https://github.com/mrvux/dx11-vvvv-girlpower/blob/master/nodes/texture11/Filter/Bump.tfx

shader Bump_Directional_Internal_TextureFX : BumpBase
{
    float4 PhongDirectional(float3 NormV, float3 ViewDirV, float3 LightDirV)
    {
        float4 amb = float4(lAmb.rgb, 1);
        //halfvector
        float3 H = normalize(ViewDirV + LightDirV);

        //compute blinn lighting
        float3 shades = lit(dot(NormV, LightDirV), dot(NormV, H), lPower).xyz;

        float4 diff = lDiff * shades.y;
        diff.a = 1;

        //reflection vector (view space)
        float3 R = normalize(2 * dot(NormV, LightDirV) * NormV - LightDirV);

        //normalized view direction (view space)
        float3 V = normalize(ViewDirV);

        //calculate specular light
        float4 spec = pow(max(dot(R, V),0), lPower*.2) * lSpec;

        return (amb + diff) + spec;
    }


    float3 Bump(float4 nmap, float2 uv, float2 R)
    {
        float3 LightDirV = normalize(-lDir);
        float3 NormV = float3(nmap.x - 0.5, -(nmap.y - 0.5), -1);
        
        NormV = lerp(float3(0, 0, -1), NormV, BumpAmount);
        NormV = normalize(NormV);

        float3 ViewDirV = -normalize(float3((uv.xy * 2 - 1) * float2(1, -1) * R/R.x, 11.1));

        return PhongDirectional(NormV, ViewDirV, LightDirV).rgb;
    };
};