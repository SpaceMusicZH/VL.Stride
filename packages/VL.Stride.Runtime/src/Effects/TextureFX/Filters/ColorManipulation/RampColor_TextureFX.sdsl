[Category("Filter.Experimental")]
[Summary("")]
shader RampColor_TextureFX : TextureFX
{
    [EnumType("VL.Stride.Effects.TextureFX.RampColorType")]
    int Type;

    stage float2 FromXY = float2(0,0);
    stage float2 ToXY = float2(1,1);

    float4 RampRGB(Texture2D tex, float2 fromXY, float2 toXY, float4 c)
    {
        return float4(
            tex.Sample(Sampler, lerp(fromXY, toXY, c.r)).r,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.g)).g,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.b)).b,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.a)).a
        );
    }

    float4 RampHue(Texture2D tex, float2 fromXY, float2 toXY, float4 c)
    {
        c.rgb = base.RGBtoHSL(c.rgb).x;
        return float4(
            tex.Sample(Sampler, lerp(fromXY, toXY, c.r)).r,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.g)).g,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.b)).b,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.a)).a
        );
    }

    float4 RampLuma(Texture2D tex, float2 fromXY, float2 toXY, float4 c)
    {
        c.rgb = dot(c.rgb, float3(.33,.59,.11));
        return float4(
            tex.Sample(Sampler, lerp(fromXY, toXY, c.r)).r,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.g)).g,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.b)).b,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.a)).a
        );
    }

    float4 RampSaturation(Texture2D tex, float2 fromXY, float2 toXY, float4 c)
    {
        c.rgb = base.RGBtoHSL(c.rgb).y;
        return float4(
            tex.Sample(Sampler, lerp(fromXY, toXY, c.r)).r,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.g)).g,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.b)).b,
            tex.Sample(Sampler, lerp(fromXY, toXY, c.a)).a
        );
    }

    stage override float4 Shading()
    {
        float4 c = InTex();
        float pa = c.a;

        switch((uint)Type%4)
        {
            case 0 : c = RampRGB(Texture1, FromXY, ToXY, c); break;
            case 1 : c = RampHue(Texture1, FromXY, ToXY, c); break;
            case 2 : c = RampLuma(Texture1, FromXY, ToXY, c); break;
            case 3 : c = RampSaturation(Texture1, FromXY, ToXY, c); break;
        }

        c.a *= pa;
        return c;
    }
};